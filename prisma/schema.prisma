datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")

}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id      String    @id @default(cuid())
  name    String?
  email   String?   @unique
  emailVerified     DateTime?
  image   String?
  password String?
  role    UserRole @default(USER)
  account Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Invoice {
  id String @id @default(uuid())
  invoiceName   String
  total         Int
  status        InvoiceStatus
  date          DateTime
  dueDate       Int
  fromName      String
  fromEmail     String
  fromAddress   String
  clientName    String
  clientEmail   String
  clientAddress String
  currency      String
  invoiceNumber Int
  note          String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invoiceItems        InvoiceItem[]
}

model InvoiceItem {
  id          Int      @id @default(autoincrement())
  description String
  quantity    Int
  rate        Float
  amount      Float
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete:Cascade)
}

enum InvoiceStatus {
  PAID
  PENDING
}

model Projects {
  id      String    @id @default(cuid())
  projectName String
  projectNumber Int
  customerName String
  description  String
  startDate    DateTime
  endDate      DateTime
  status       String
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id  String  @id @default(cuid())
  email String
  token String  @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id  String  @id @default(cuid())
  
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}